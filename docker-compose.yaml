version: "2.6"

services:
  social-api:
    build:
      context: .
      dockerfile: Dockerfile
    image: social-api
    container_name: social-api
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    networks:
      - social-network

  redis:
    container_name: social-redis
    image: "redis:alpine"
    ports:
      - "6379:6379"
    networks:
      - social-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: social-zookeeper
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - social-network

  kafka1:
    image: confluentinc/cp-kafka:7.3.0
    container_name: social-kafka1
    hostname: kafka1
    ports:
      - "9092:9092"
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2 # Reduced to 2 since only 2 brokers
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 2
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1 # Adjusted for 2 brokers
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 2
      KAFKA_MIN_INSYNC_REPLICAS: 1
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_MESSAGE_MAX_BYTES: 10485760
    volumes:
      - kafka1-data:/var/lib/kafka/data
    healthcheck:
      test:
        [
          "CMD",
          "kafka-topics.sh",
          "--bootstrap-server",
          "localhost:9092",
          "--list",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - social-network

  kafka2:
    image: confluentinc/cp-kafka:7.3.0
    container_name: social-kafka2
    hostname: kafka2
    ports:
      - "9093:9093"
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 2
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    volumes:
      - kafka2-data:/var/lib/kafka/data
    healthcheck:
      test:
        [
          "CMD",
          "kafka-topics.sh",
          "--bootstrap-server",
          "localhost:9093",
          "--list",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - social-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: social-kafka-ui
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:9092,kafka2:9093
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - social-network

  postgres:
    image: debezium/postgres:15
    container_name: social-postgres
    hostname: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"
      - "-c"
      - "max_wal_senders=10"
      - "-c"
      - "max_replication_slots=10"
    networks:
      - social-network

  connect:
    image: confluentinc/cp-kafka-connect:7.3.0
    container_name: social-connect
    hostname: connect
    ports:
      - "8083:8083"
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      postgres:
        condition: service_started
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka1:9092,kafka2:9093
      CONNECT_GROUP_ID: connect-cluster
      CONNECT_CONFIG_STORAGE_TOPIC: connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: connect-status
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 2
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 2
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 2
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_PLUGIN_PATH: /usr/share/java,/usr/share/confluent-hub-components
    command:
      - bash
      - -c
      - |
        echo "Installing Elasticsearch Sink Connector"
        confluent-hub install --no-prompt confluentinc/kafka-connect-elasticsearch:latest
        echo "Installing Debezium PostgreSQL Connector"
        confluent-hub install --no-prompt debezium/debezium-connector-postgresql:latest
        echo "Launching Kafka Connect"
        /etc/confluent/docker/run
    volumes:
      - ./cdc:/kafka/connect/cdc
    networks:
      - social-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: social-elasticsearch
    hostname: elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    volumes:
      - es-data:/usr/share/elasticsearch/data
    networks:
      - social-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: social-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - social-network

volumes:
  zookeeper-data:
  kafka1-data:
  kafka2-data:
  postgres-data:
  es-data:
  cdc:

networks:
  social-network:
    driver: bridge
